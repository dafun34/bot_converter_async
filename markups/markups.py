"""–ú–æ–¥—É–ª—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä –±–æ—Ç–∞."""
from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardMarkup,
)


def example_inline_markup() -> InlineKeyboardMarkup:
    """–ü—Ä–∏–º–µ—Ä –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã."""
    keyboard_inline = [
        [
            InlineKeyboardButton("Option 1", callback_data="1"),
            InlineKeyboardButton("Option 2", callback_data="2"),
        ],
        [InlineKeyboardButton("Option 3", callback_data="3")],
    ]

    return InlineKeyboardMarkup(keyboard_inline)


def example_reply_keyboard() -> ReplyKeyboardMarkup:
    """–ü—Ä–∏–º–µ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã."""
    keyboard = [
        [KeyboardButton("Option 1"), KeyboardButton("Option 2")],
        [KeyboardButton("Option 3")],
    ]

    reply_markup = ReplyKeyboardMarkup(
        keyboard, resize_keyboard=True, one_time_keyboard=True
    )
    return reply_markup


def start() -> InlineKeyboardMarkup:
    """–ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start."""
    keyboard = [
        [
            InlineKeyboardButton(
                "–ü–æ–º–æ—â—å",
                callback_data="help_callback_handler",
            )
        ],
        [InlineKeyboardButton("–ú–µ–Ω—é", callback_data="menu_callback_handler")],
    ]
    return InlineKeyboardMarkup(keyboard)


def menu() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ú–µ–Ω—é."""
    keyboard = [
        [
            InlineKeyboardButton(
                "üíµ –ö—É—Ä—Å—ã –í–∞–ª—é—Ç üíµ", callback_data="get_currencies_handler"
            ),
            InlineKeyboardButton(
                "üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç üîÑ", callback_data="start_convert_scenario"
            ),
            InlineKeyboardButton(
                "üìÖ VPV –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–∫–∏–¥–æ–∫ üìÖ",
                callback_data="get_vpv_calendar_handler",
            ),
        ],
    ]
    return InlineKeyboardMarkup(keyboard)


def active_currencies_markup(
    currencies: list, converter: bool = False
) -> InlineKeyboardMarkup:
    """
    –ü–æ–ª—É—á–∏—Ç—å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∞–ª—é—Ç.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã—Ö –≤–∞–ª—é—Ç(currencies)
    –ø–æ char_code(–ö–æ–¥ –≤–∞–ª—é—Ç—ã)
    """
    keyboard = []
    for currency in currencies:
        if not converter and currency.name == "–†–æ—Å—Å–∏–π—Å–∫–∏–π –†—É–±–ª—å":
            continue
        keyboard.append(
            [
                InlineKeyboardButton(
                    currency.name,
                    callback_data=currency.char_code,
                )
            ]
        )
    if converter:
        keyboard.append(
            [
                InlineKeyboardButton(
                    "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é ‚ùå",
                    callback_data="cancel_convert_scenario",
                )
            ]
        )
    else:
        keyboard.append(
            [
                InlineKeyboardButton(
                    "üîù –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é üîù",
                    callback_data="menu_callback_handler",
                )
            ]
        )
    return InlineKeyboardMarkup(keyboard)


def converter_scenario_markup() -> InlineKeyboardMarkup:
    """
    –ò–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏.

    –û–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã —Å—Ü–µ–Ω–∞—Ä–∏—è.
    """
    keyboard = []
    keyboard.append(
        [
            InlineKeyboardButton(
                "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é ‚ùå",
                callback_data="cancel_convert_scenario",
            )
        ]
    )
    return InlineKeyboardMarkup(keyboard)
