name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  generate_env:
    name: Generate .env file
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Generate .env file
      env:
        BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
        BOT_PROD_TOKEN: ${{ secrets.BOT_PROD_TOKEN }}
        YANDEXAPIKEY: ${{ secrets.YANDEXAPIKEY }}
        OPENAI_TOKEN: ${{ secrets.OPENAI_TOKEN }}
        DB_DRIVER: ${{ secrets.DB_DRIVER }}
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASS: ${{ secrets.DB_PASS }}
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_PORT: ${{ secrets.DB_PORT }}
        ALLOWED_HOST: ${{ secrets.ALLOWED_HOST }}
        ADMIN_USERNAME: ${{ secrets.ADMIN_USERNAME }}
        ADMIN_PASS: ${{ secrets.ADMIN_PASS }}
      run: |
        echo "BOT_TOKEN=${BOT_TOKEN}" > .env
        echo "BOT_PROD_TOKEN=${BOT_PROD_TOKEN}" >> .env
        echo "YANDEXAPIKEY=${YANDEXAPIKEY}" >> .env
        echo "OPENAI_TOKEN=${OPENAI_TOKEN}" >> .env
        echo "" >> .env
        echo "DB_DRIVER=${DB_DRIVER}" >> .env
        echo "DB_NAME=${DB_NAME}" >> .env
        echo "DB_USER=${DB_USER}" >> .env
        echo "DB_PASS=${DB_PASS}" >> .env
        echo "DB_HOST=${DB_HOST}" >> .env
        echo "DB_PORT=${DB_PORT}" >> .env
        echo "ALLOWED_HOST=${ALLOWED_HOST}" >> .env
        echo "ADMIN_USERNAME=${ADMIN_USERNAME}" >> .env
        echo "ADMIN_PASS=${ADMIN_PASS}" >> .env

  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: generate_env

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Ensure the project directory exists
      run: |
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_SERVER }} "mkdir -p ${PROJECT_PATH}"

    - name: Upload .env to server
      run: |
        scp .env ${{ secrets.SSH_USER }}@${{ secrets.SSH_SERVER }}:${{ secrets.PROJECT_PATH }}/.env
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_SERVER }} 'chmod 600 ${PROJECT_PATH}/.env'

    - name: Deploy to Remote Server
      run: |
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_SERVER }} << 'EOF'
        cd ${PROJECT_PATH}
        git pull origin master
        docker compose down
        docker compose up --build -d
        EOF
